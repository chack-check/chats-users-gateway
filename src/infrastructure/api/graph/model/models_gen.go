// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type PaginatedMessagesWithUsersErrorResponse interface {
	IsPaginatedMessagesWithUsersErrorResponse()
}

type ErrorResponse struct {
	Message string `json:"message"`
}

func (ErrorResponse) IsPaginatedMessagesWithUsersErrorResponse() {}

type Message struct {
	ID          int          `json:"id"`
	Type        MessageType  `json:"type"`
	SenderID    *int         `json:"senderId,omitempty"`
	ChatID      int          `json:"chatId"`
	Content     *string      `json:"content,omitempty"`
	Voice       *SavedFile   `json:"voice,omitempty"`
	Circle      *SavedFile   `json:"circle,omitempty"`
	ReplyToID   *int         `json:"replyToId,omitempty"`
	ReadedBy    []int        `json:"readedBy,omitempty"`
	Reactions   []*Reaction  `json:"reactions,omitempty"`
	Datetine    string       `json:"datetine"`
	Attachments []*SavedFile `json:"attachments"`
	Mentioned   []int        `json:"mentioned,omitempty"`
	Datetime    string       `json:"datetime"`
}

type PaginatedMessagesWithUsers struct {
	Offset   int        `json:"offset"`
	Limit    int        `json:"limit"`
	Total    int        `json:"total"`
	Messages []*Message `json:"messages"`
	Users    []*User    `json:"users"`
}

func (PaginatedMessagesWithUsers) IsPaginatedMessagesWithUsersErrorResponse() {}

type Query struct {
}

type Reaction struct {
	Content string `json:"content"`
	UserID  int    `json:"userId"`
}

type SavedFile struct {
	OriginalURL       string  `json:"originalUrl"`
	OriginalFilename  string  `json:"originalFilename"`
	ConvertedURL      *string `json:"convertedUrl,omitempty"`
	ConvertedFilename *string `json:"convertedFilename,omitempty"`
}

type User struct {
	ID             int               `json:"id"`
	Username       string            `json:"username"`
	Phone          *string           `json:"phone,omitempty"`
	Email          *string           `json:"email,omitempty"`
	FirstName      string            `json:"firstName"`
	LastName       string            `json:"lastName"`
	MiddleName     *string           `json:"middleName,omitempty"`
	Status         *string           `json:"status,omitempty"`
	EmailConfirmed bool              `json:"emailConfirmed"`
	PhoneConfirmed bool              `json:"phoneConfirmed"`
	Avatar         *SavedFile        `json:"avatar,omitempty"`
	Permissions    []*UserPermission `json:"permissions"`
}

type UserPermission struct {
	Name     string                  `json:"name"`
	Code     string                  `json:"code"`
	Category *UserPermissionCategory `json:"category,omitempty"`
}

type UserPermissionCategory struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

type MessageType string

const (
	MessageTypeText   MessageType = "text"
	MessageTypeEvent  MessageType = "event"
	MessageTypeCall   MessageType = "call"
	MessageTypeVoice  MessageType = "voice"
	MessageTypeCircle MessageType = "circle"
)

var AllMessageType = []MessageType{
	MessageTypeText,
	MessageTypeEvent,
	MessageTypeCall,
	MessageTypeVoice,
	MessageTypeCircle,
}

func (e MessageType) IsValid() bool {
	switch e {
	case MessageTypeText, MessageTypeEvent, MessageTypeCall, MessageTypeVoice, MessageTypeCircle:
		return true
	}
	return false
}

func (e MessageType) String() string {
	return string(e)
}

func (e *MessageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageType", str)
	}
	return nil
}

func (e MessageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
