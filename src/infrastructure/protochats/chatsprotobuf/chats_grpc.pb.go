// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chats.proto

package chatsprotobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatsClient is the client API for Chats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatsClient interface {
	GetChatById(ctx context.Context, in *GetChatByIdRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	GetMessageById(ctx context.Context, in *GetMessageByIdRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetChatsByIds(ctx context.Context, in *GetChatsByIdsRequest, opts ...grpc.CallOption) (*ChatsArrayResponse, error)
	GetMessagesByIds(ctx context.Context, in *GetMessagesByIdsRequest, opts ...grpc.CallOption) (*MessagesArrayResponse, error)
	GetMessagesByChatId(ctx context.Context, in *GetMessagesByChatIdRequest, opts ...grpc.CallOption) (*PaginatedMessages, error)
}

type chatsClient struct {
	cc grpc.ClientConnInterface
}

func NewChatsClient(cc grpc.ClientConnInterface) ChatsClient {
	return &chatsClient{cc}
}

func (c *chatsClient) GetChatById(ctx context.Context, in *GetChatByIdRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/chatsprotobuf.Chats/GetChatById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsClient) GetMessageById(ctx context.Context, in *GetMessageByIdRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chatsprotobuf.Chats/GetMessageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsClient) GetChatsByIds(ctx context.Context, in *GetChatsByIdsRequest, opts ...grpc.CallOption) (*ChatsArrayResponse, error) {
	out := new(ChatsArrayResponse)
	err := c.cc.Invoke(ctx, "/chatsprotobuf.Chats/GetChatsByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsClient) GetMessagesByIds(ctx context.Context, in *GetMessagesByIdsRequest, opts ...grpc.CallOption) (*MessagesArrayResponse, error) {
	out := new(MessagesArrayResponse)
	err := c.cc.Invoke(ctx, "/chatsprotobuf.Chats/GetMessagesByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsClient) GetMessagesByChatId(ctx context.Context, in *GetMessagesByChatIdRequest, opts ...grpc.CallOption) (*PaginatedMessages, error) {
	out := new(PaginatedMessages)
	err := c.cc.Invoke(ctx, "/chatsprotobuf.Chats/GetMessagesByChatId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatsServer is the server API for Chats service.
// All implementations must embed UnimplementedChatsServer
// for forward compatibility
type ChatsServer interface {
	GetChatById(context.Context, *GetChatByIdRequest) (*ChatResponse, error)
	GetMessageById(context.Context, *GetMessageByIdRequest) (*MessageResponse, error)
	GetChatsByIds(context.Context, *GetChatsByIdsRequest) (*ChatsArrayResponse, error)
	GetMessagesByIds(context.Context, *GetMessagesByIdsRequest) (*MessagesArrayResponse, error)
	GetMessagesByChatId(context.Context, *GetMessagesByChatIdRequest) (*PaginatedMessages, error)
	mustEmbedUnimplementedChatsServer()
}

// UnimplementedChatsServer must be embedded to have forward compatible implementations.
type UnimplementedChatsServer struct {
}

func (UnimplementedChatsServer) GetChatById(context.Context, *GetChatByIdRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatById not implemented")
}
func (UnimplementedChatsServer) GetMessageById(context.Context, *GetMessageByIdRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageById not implemented")
}
func (UnimplementedChatsServer) GetChatsByIds(context.Context, *GetChatsByIdsRequest) (*ChatsArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatsByIds not implemented")
}
func (UnimplementedChatsServer) GetMessagesByIds(context.Context, *GetMessagesByIdsRequest) (*MessagesArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesByIds not implemented")
}
func (UnimplementedChatsServer) GetMessagesByChatId(context.Context, *GetMessagesByChatIdRequest) (*PaginatedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesByChatId not implemented")
}
func (UnimplementedChatsServer) mustEmbedUnimplementedChatsServer() {}

// UnsafeChatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatsServer will
// result in compilation errors.
type UnsafeChatsServer interface {
	mustEmbedUnimplementedChatsServer()
}

func RegisterChatsServer(s grpc.ServiceRegistrar, srv ChatsServer) {
	s.RegisterService(&Chats_ServiceDesc, srv)
}

func _Chats_GetChatById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).GetChatById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatsprotobuf.Chats/GetChatById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).GetChatById(ctx, req.(*GetChatByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chats_GetMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).GetMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatsprotobuf.Chats/GetMessageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).GetMessageById(ctx, req.(*GetMessageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chats_GetChatsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).GetChatsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatsprotobuf.Chats/GetChatsByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).GetChatsByIds(ctx, req.(*GetChatsByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chats_GetMessagesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).GetMessagesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatsprotobuf.Chats/GetMessagesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).GetMessagesByIds(ctx, req.(*GetMessagesByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chats_GetMessagesByChatId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesByChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).GetMessagesByChatId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatsprotobuf.Chats/GetMessagesByChatId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).GetMessagesByChatId(ctx, req.(*GetMessagesByChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chats_ServiceDesc is the grpc.ServiceDesc for Chats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatsprotobuf.Chats",
	HandlerType: (*ChatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatById",
			Handler:    _Chats_GetChatById_Handler,
		},
		{
			MethodName: "GetMessageById",
			Handler:    _Chats_GetMessageById_Handler,
		},
		{
			MethodName: "GetChatsByIds",
			Handler:    _Chats_GetChatsByIds_Handler,
		},
		{
			MethodName: "GetMessagesByIds",
			Handler:    _Chats_GetMessagesByIds_Handler,
		},
		{
			MethodName: "GetMessagesByChatId",
			Handler:    _Chats_GetMessagesByChatId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chats.proto",
}
